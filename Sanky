import pandas as pd
import numpy as np
df = pd.read_csv('GA_raw_full.csv')
df = df.drop('Unnamed: 0', axis = 1)
df

import plotly.graph_objects as go

########### Example 1

fig = go.Figure(data=[go.Sankey(
    node = dict(
      pad = 15,
      thickness = 20,
      line = dict(color = "black", width = 0.5),
      label = ["A1", "A2", "B1", "B2", "C1", "C2"],
      color = "blue"
    ),
    link = dict(
      source = [0, 1, 0, 2, 3, 3], # indices correspond to labels, eg A1, A2, A1, B1, ...
      target = [2, 3, 3, 4, 4, 5],
      value = [8, 4, 2, 8, 4, 2]
  ))])

fig.update_layout(title_text="Basic Sankey Diagram", font_size=10)
fig.show()






#fig.show()
#fig.write_html('first_figure.html', auto_open=True)





############# Example 2
import urllib, json

url = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'
response = urllib.request.urlopen(url)
data = json.loads(response.read())

# override gray link colors with 'source' colors
opacity = 0.4
# change 'magenta' to its 'rgba' value to add opacity
data['data'][0]['node']['color'] = ['rgba(255,0,255, 0.8)' if color == "magenta" else color for color in data['data'][0]['node']['color']]
data['data'][0]['link']['color'] = [data['data'][0]['node']['color'][src].replace("0.8", str(opacity))
                                    for src in data['data'][0]['link']['source']]

fig = go.Figure(data=[go.Sankey(
    valueformat = ".0f",
    valuesuffix = "TWh",
    # Define nodes
    node = dict(
      pad = 15,
      thickness = 15,
      line = dict(color = "black", width = 0.5),
      label =  data['data'][0]['node']['label'],
      color =  data['data'][0]['node']['color']
    ),
    # Add links
    link = dict(
      source =  data['data'][0]['link']['source'],
      target =  data['data'][0]['link']['target'],
      value =  data['data'][0]['link']['value'],
      label =  data['data'][0]['link']['label'],
      color =  data['data'][0]['link']['color']
))])

fig.update_layout(title_text="Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
                  font_size=10)
fig.show()

############## Manual - not 100% perfect
import pandas as pd
import numpy as np
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
init_notebook_mode(connected=True)

# Nodes & links
nodes = [['ID', 'Label', 'Color'],
        [0,'Direct','#ffff00 '],
        [1,'Zoekmachines','#8A5988'],
        [2,'Linkedin','#449E9E'],
        [3,'Vacature websites','#7FC241'],
        [4,'Intranet','#D3D3D3'],
        [6,'Other Social Media','#8A5988'],
         [7,'Tech','#000080'],
         [8,'Variouss','#4994CE'],
        [9,'Afggevallen gesprek','#4994CE'],
        [10,'Afgwezen door Manager','#4994CE'],
        [11,'Afgewezen op CV','#4994CE'],
        [12,'Kandidaat niet meer beschikbaar/terugetrokken','#4994CE'],
        [13,'Vacature ingetrokken','#4994CE'],
        [14,'Aanbieding geweigerd','#4994CE'],
        [15,'Aanbieding geaccepteerd','#4994CE'],]



# nodes = [['ID', 'Label', 'Color'],
#         [0,'ANWB.nl & Partners','#ffff00 '],
#         [1,'Direct','#8A5988'],
#         [2,'Zoekmachines','#449E9E'],
#         [3,'Linkedin','#7FC241'],
#         [4,'Vacature websites','#D3D3D3'],
#         [6,'Intranet','#8A5988'],
#          [7,'Other Social Media','#000080'],
#          [8,'Tech Websites','#4994CE'],
#         [9,'Afggevallen gesprek','#4994CE'],
#         [10,'Afgwezen door Manager','#4994CE'],
#         [11,'Afgewezen op CV','#4994CE'],
#         [12,'Kandidaat niet meer beschikbaar/terugetrokken','#4994CE'],
#         [13,'Vacature ingetrokken','#4994CE'],
#         [14,'Aanbieding geweigerd','#4994CE'],
#         [15,'Aanbieding geaccepteerd','#4994CE'],]

# links with your data
links = [['Source','Target','Value','Link Color'],

        # ANWB.nl
        [0,9,8,'rgba(255, 254, 0, 0.2)'],
        [0,10,106,'rgba(255, 255, 0, 0.2)'],
        [0,11,34,'rgba(255, 255, 0, 0.2)'],
        [0,12,6,'rgba(255, 255, 0, 0.2)'],
        [0,13,10.5,'rgba(255, 255, 0, 0.2)'],
        [0,14,1,'rgba(255, 255, 0, 0.2)'],
        [0,15,5.2,'rgba(255, 255, 0, 0.2)'],
         

        # Direct
        [1,9,6.3,'rgba(211, 211, 211, 0.5'],
        [1,10,27,'rgba(211, 211, 211, 0.5'],
        [1,11,83,'rgba(211, 211, 211, 0.5'],
        [1,12,5,'rgba(211, 211, 211, 0.5'],
        [1,13,9.7,'rgba(211, 211, 211, 0.5'],
        [1,14,0.2,'rgba(211, 211, 211, 0.5'],
        [1,15,4.2,'rgba(211, 211, 211, 0.5'],
         
         
        # Zoekmachines
        [2,9,5.6,'rgba(211, 211, 211, 0.5'],
        [2,10,24.2,'rgba(211, 211, 211, 0.5'],
        [2,11,74,'rgba(211, 211, 211, 0.5'],
        [2,12,4.8,'rgba(211, 211, 211, 0.5'],
        [2,13,8.7,'rgba(211, 211, 211, 0.5'],
        [2,14,0.21,'rgba(211, 211, 211, 0.5'],
        [2,15,3.7,'rgba(211, 211, 211, 0.5'],
         
         
                 # Linkedin
        [3,9,2.4,'rgba(211, 211, 211, 0.5'],
        [3,10,10.35,'rgba(211, 211, 211, 0.5'],
        [3,11,31.8,'rgba(211, 211, 211, 0.5'],
        [3,12,2,'rgba(211, 211, 211, 0.5'],
        [3,13,3.7,'rgba(211, 211, 211, 0.5'],
        [3,14,0.09,'rgba(211, 211, 211, 0.5'],
        [3,15,1.6,'rgba(211, 211, 211, 0.5'],
        
        
        
                # Vacature websites
        [4,9,2.7,'rgba(211, 211, 211, 0.5'],
        [4,10,11.2,'rgba(211, 211, 211, 0.5'],
        [4,11,34.4,'rgba(211, 211, 211, 0.5'],
        [4,12,2.3,'rgba(211, 211, 211, 0.5'],
        [4,13,4,'rgba(211, 211, 211, 0.5'],
        [4,14,00.1,'rgba(211, 211, 211, 0.5'],
        [4,15,1.7,'rgba(211, 211, 211, 0.5'],
        
                 # Intranet
        [6,9,1,'rgba(211, 211, 211, 0.5'],
        [6,10,1,'rgba(211, 211, 211, 0.5'],
        [6,11,1,'rgba(211, 211, 211, 0.5'],
        [6,12,1,'rgba(211, 211, 211, 0.5'],
        [6,13,1,'rgba(211, 211, 211, 0.5'],
        [6,14,1,'rgba(211, 211, 211, 0.5'],
        [6,15,1,'rgba(211, 211, 211, 0.5'],    
         
         
                         # Other social media
        [7,9,0.4,'rgba(211, 211, 211, 0.5'],
        [7,10,1.65,'rgba(211, 211, 211, 0.5'],
        [7,11,5.15,'rgba(211, 211, 211, 0.5'],
        [7,12,0.30,'rgba(211, 211, 211, 0.5'],
        [7,13,0.6,'rgba(211, 211, 211, 0.5'],
        [7,14,0.015,'rgba(211, 211, 211, 0.5'],
        [7,15,0.28,'rgba(211, 211, 211, 0.5'],
        
                # Tech
        [8,9,0.09,'rgba(211, 211, 211, 0.5'],
        [8,10,0.37,'rgba(211, 211, 211, 0.5'],
        [8,11,1.165,'rgba(211, 211, 211, 0.5'],
        [8,12,0.06,'rgba(211, 211, 211, 0.5'],
        [8,13,0.12,'rgba(211, 211, 211, 0.5'],
        [8,14,0.0039,'rgba(211, 211, 211, 0.5'],
        [8,15,0.01,'rgba(211, 211, 211, 0.5'],]
         
             # Expected offline %%
#         [5,7,1,'rgba(253, 227, 212, 1)'],
#          [5,8,1,'rgba(253, 227, 212, 1)'],
#          [5,9,1,'rgba(253, 227, 212, 1)'],


# links with some data for illustrative purposes ################
#links = [
#    ['Source','Target','Value','Link Color'],
#    
#    # AKJ
#    [0,3,846888,'rgba(127, 194, 65, 0.2)'],
#    [0,4,1045,'rgba(127, 194, 65, 0.2)'],
#    
#    # Amazon
#    [1,3,1294423,'rgba(211, 211, 211, 0.5)'],
#    [1,4,42165,'rgba(211, 211, 211, 0.5)'],
#    [1,5,415,'rgba(211, 211, 211, 0.5)'],
#    
#    # Flipkart
#    [2,5,1,'rgba(253, 227, 212, 1)'],]
#################################################################


# Retrieve headers and build dataframes
#nodes_headers = nodes.pop(0)
#links_headers = links.pop(0)
df_nodes = pd.DataFrame(nodes, columns = nodes_headers)
df_links = pd.DataFrame(links, columns = links_headers)
#df_nodes = df_nodes.drop(df_nodes.index[0])
#df_links = df_links.drop(df_links.index[0])

# Sankey plot setup
data_trace = dict(
    type='sankey',
    domain = dict(
      x =  [0,1],
      y =  [0,1]
    ),
    orientation = "h",
    valueformat = ".0f",
    node = dict(
      pad = 15,
     thickness = 15,
      line = dict(
        color = "yellow",
        width = 0
      ),
      label =  df_nodes['Label'],#.dropna(axis=0, how='any'),
      color = 'yellow'#df_nodes['Color']
    ),
    link = dict(
      source = df_links['Source'],#.dropna(axis=0, how='any'),
      target = df_links['Target'],#.dropna(axis=0, how='any'),
      value = df_links['Value'],#.dropna(axis=0, how='any'),
      color = df_links['Link Color'],#.dropna(axis=0, how='any'),
  )
)

layout = dict(
        title = "Flow bezoekers WerkenBij",
    height = 750,
    font = dict(
      size = 10),)

fig = dict(data=[data_trace], layout=layout)
iplot(fig, validate=False)

